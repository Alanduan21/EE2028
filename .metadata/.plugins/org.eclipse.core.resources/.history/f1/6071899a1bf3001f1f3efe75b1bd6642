/*
 * asm_func.s
 *
 *  Created on: 7/2/2025
 *      Author: Hou Linxin
 */
   .syntax unified
	.cpu cortex-m4
	.fpu softvfp
	.thumb

		.global asm_func

@ Start of executable code
.section .text

@ CG/[T]EE2028 Assignment 1, Sem 2, AY 2024/25
@ (c) ECE NUS, 2025

@ Write Student 1’s Name here:LI XIAOYANG
@ Write Student 2’s Name here:DUAN YIHE

@ Look-up table for registers:

@ R0 building array pointer
@ R1 entry array pointer
@ R2 exit array pointer
@ R3 result array poiner
@ R4 in sumEntries, each entry; in I

@ write your program from here:

asm_func:
 	PUSH {R4-R9,R14}
 	@my code

	MOV R6, #5 @ counter
	MOV R7, #0
sumEntries:
		LDR R4, [R1], #4 @ load entries to R4
		ADD R7, R4 @ R7 is SUM of total entries
		SUBS R6, #1
		BNE sumEntries

		MOV R6, #6  @ counter
		MOV R8, #12 @ LIMIT

insert:
		LDR R4, [R0], #4 @ section amount NO.
		LDR R9, [R2], #4 @ each section's EXIT
		SUB R5, R8, R4 @ R5 is LEFT_WITH
		CMP R7, R5 @ compare SUM-LEFT_WITH
		BHI SumMoreThanLeftWith@ if SUM > LEFT_WITH
		B SumLessThanLeftWith

		@ change into different loops

SumMoreThanLeftWith:
		SUB R4, R8, R9 @ 12 - EXIT stored in R4
		SUB R7, R5 @ update SUM
		B continueLoop


SumLessThanLeftWith:

		ADD R4, R7 @ all SUM remained enter current section
		SUB R4, R9 @ result after substracting EXIT
		MOV R7, #0 @ clear SUM
		B continueLoop

continueLoop:

		SUBS R6, #1
		STR R4, [R3], #4 @ store result
		BNE insert


 	POP {R4-R9,R14}

	BX LR

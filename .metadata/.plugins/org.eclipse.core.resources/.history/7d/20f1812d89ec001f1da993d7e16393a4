/*
 * asm_func.s
 *
 *  Created on: 7/2/2025
 *      Author: Hou Linxin
 */
   .syntax unified
	.cpu cortex-m4
	.fpu softvfp
	.thumb

		.global asm_func

@ Start of executable code
.section .text

@ CG/[T]EE2028 Assignment 1, Sem 2, AY 2024/25
@ (c) ECE NUS, 2025

@ Write Student 1’s Name here:Duan Yihe A0276944M
@ Write Student 2’s Name here: Li Xiaoyang A0281725B

@ Look-up table for registers:

@ R0: building (points to building[0][0])
@ R1: entry (points to entry[0])
@ R2: exit (points to exit[0][0])
@ R3: result (points to result[0][0])
@ R4: f loop i
@ R5: s loop j
@ R6: entry[k]
@ R7:
@ R8: LIMIT
@ R9:
@ R10:

@ write your program from here:

@ constant lists
.equ F,3
.equ S,2
.equ LIMIT,12

asm_func:
 	PUSH {R4-R8,R14} @ right now I am using R0-R8, R0-R3 no need PUSH

	LDR R0,

	MOV R4,#0 @ floor index clear

	FLOOR_LOOP:
		CMP R4,#F @ for (i = 0; i < F; i++), if bigger than stop loop
		BGE END_LOOP

		MOV R5, #0 @ clear R5 for section looping

	SECTION_LOOP:
		CMP R5,#S @ if bigger than next floor
		BGE NEXT_FLOOR



	NEXT_FLOOR:



	END_LOOP:
		MOV R0,R3
		POP {R4-R8,R14}
		BX LR
